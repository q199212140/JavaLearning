package cn.mldn.demo;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

class Person4TreeSet implements Comparable <Person4TreeSet>
{
    /*source中自动生成hashCode和equals接口，达到HashSet去重的目的*/
    @Override
    public int hashCode()
    {
        final int prime  = 31;
        int       result = 1;
        result = prime * result + age;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Person4TreeSet other = (Person4TreeSet) obj;
        if (age != other.age)
            return false;
        if (name == null)
        {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }

    private String name;
    private int age;
    
    public Person4TreeSet(String name, int age)
    {
        super();
        this.name = name;
        this.age  = age;
    }
    
    @Override
    public String toString()
    {
        return "Person4TreeSet [name=" + name + ", age=" + age + "]";
    }

    public int compareTo(Person4TreeSet per)
    {
        if(this.age < per.age)
        {
            return -1;
        }
        else if(this.age > per.age)
        {
            return 1;
        }
        else
        {
            return (this.name.compareTo(per.name));
        }
    }

}

public class TreeSetDemo
{
    public static void main(String[] args)
    {
        System.out.println("Lesson 6.132 Set接口简介：");
        
        //Set集合数据保存，设置重复内容 JDK1.9支持
        Set<String> all = new TreeSet<String>();
        all.add("Hello");
        all.add("Aello");
        all.add("Hello");
        all.add("World");
        all.add("Leooo");
        all.add("!!!");
        
        all.forEach(System.out::println);
        /*结果：升序
         * Lesson 6.132 Set接口简介：
        !!!
        Aello
        Hello
        Leooo
        World
        */
        
        System.out.println("\n使用自定义类实现排序操作：自定义类必须实现Comparable接口，进行排序比较填充到TreeSet中：");
        //Set<Person4TreeSet> allPerson = new HashSet<Person4TreeSet>();
        Set<Person4TreeSet> allPerson = new TreeSet<Person4TreeSet>();
        
        allPerson.add(new Person4TreeSet("王五", 33));
        allPerson.add(new Person4TreeSet("赵六", 44));
        allPerson.add(new Person4TreeSet("张三", 11));
        allPerson.add(new Person4TreeSet("李四", 22));
        allPerson.add(new Person4TreeSet("李四", 22));
        
        allPerson.forEach(System.out::println);
        /*
         * Person4TreeSet [name=张三, age=11]
        Person4TreeSet [name=李四, age=22]
        Person4TreeSet [name=王五, age=33]
        Person4TreeSet [name=赵六, age=44]*/
        
        System.out.println("\nLesson.6.135 Iterator迭代输出：");
        Iterator<Person4TreeSet> itr = allPerson.iterator();
        
        while(itr.hasNext())
        {
            Person4TreeSet per = itr.next();
            if(per.compareTo(new Person4TreeSet("李四", 22)) == 0)
            {
                //allPerson.remove(new Person4TreeSet("李四", 22));
                /*利用Collection接口的删除方法，报并发错误，删除失败
                 * Lesson.6.135 Iterator迭代输出：
                Person4TreeSet [name=张三, age=11]
                Exception in thread "main" java.util.ConcurrentModificationException*/
                
                itr.remove();//删除成功
            }
            else
            {
                System.out.println(per);
            }           
        }
        //打印删除节点后的Set
        while(itr.hasNext())
        {
            Person4TreeSet per = itr.next();
            System.out.println(per);
        }
        System.out.println("All: " + allPerson);
    }
}
